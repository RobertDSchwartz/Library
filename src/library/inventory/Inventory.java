package library.inventory; // package to store all the different types of animals

/**
 * The base class (parent class / super class) for all types of animals in the Zoo. 
 * 
 * @author Robert Schwartz
 * @version 1.0
 * @since 2021.02.16 
 *
 */
public class Inventory {
	
	/*
	 * member fields (attributes) each animal instance (object) stores its own
	 * values unless it's a static field, then it's shared by all instances
	 * (objects) of the class.  Static fields can also be called class variables. 
	 */
	
	/**
	 * auto incremented counter each time a new item is create, this field
	 * is only updated by the default constructor.
	 */
	private static int counter = 0;

	/**
	 * Default inventory itemType is Inventory, but this should always get changed
	 * in the subclasses (child class / derived class).  It's final so it 
	 * can't be internally changed. (basic inventory, book or movie)
	 */
	protected final String itemType = "Inventory"; 
	
	/**
	 * The inventory ID, which is auto generated by a static Class counter.
	 */
	protected int id = 0;
	
	/**
	 * The inventory's location (floor,aisle,shelf).
	 */
	protected Location location;
	
	/**
	 * The Inventory's itemType; enum InventoryType values are circulating, reference or reserve.
	 */
	protected InventoryType type;
	
	/**
	 * The animal's price in dollars.
	 */
	protected double price;

	/**
	 * Default constructor will automatically runs when an object is created
	 * using the new keyword, and no arguments are passed to the constructor.
	 * 
	 * The Java compiler will create an empty default constructor if the 
	 * programmer doesn't write one. 
	 * 
	 * Typically the default constructor is used to handle housekeeping items when
	 * a object is first created. 
	 */
	public Inventory(){
		
		/*
		 * There are no setters for the animal's id because it can only be 
		 * set once in the default constructor, based on the Zoo animal count.
		 */
		Inventory.counter++;
		this.id = Inventory.counter;
		
		location = null;
		type = null;
		price = 0.0;
	}
	
	/**
	 * Overload constructor that allows setting the object's default fields (attributes).
	 * 
	 * @param age Default age in years is 0.
	 * @param inventoryType Default itemType is null.
	 * @param price Default price in pounds is 0.0.
	 */
	public Inventory(Location location, InventoryType inventoryType, double price){
		
		this(); // call the default constructor
		
		// use the setters to invoke data validation
		this.setLocation(location);
		this.setInventoryType(inventoryType);
		this.setPrice(price);
	}
	
	/* 
	 * The meaning of Encapsulation, is to make sure that "sensitive" data 
	 * is hidden from users.
	 * 
	 * class fields (attributes) should typically be declared as private 
	 * and then provide public get (getters or accessors) and set methods (setters or mutators) 
	 * to access and update the value of a private variable.
	 */

	/**
	 * Get the animal's ID. There is no setter because this can't be changed
	 * after it's been set by the constructor. 
	 * 
	 * @return The animal unique ID.
	 */
	public int getId() {
		return this.id;
	}
	
	/**
	 * Set the animals location in the library.
	 * 
	 * @param age The animals location in the library. (floor, row, shelf)
	 */
	public void setLocation(Location location) {
		this.location = location;
	}
	
	/**
	 * Get the animal's location in the library.
	 * 
	 * @return The animal's location in the library. (floor, row, shelf)
	 */
	public Location getLocation() {
		return this.location;
	}
	
	/**
	 * Get the animal's InventoryType.
	 * 
	 * @return The animal's InventoryType (enum FEMALE or MALE).
	 */
	public InventoryType getInventoryType() {
		return this.type;
	}

	/**
	 * Set the animal's InventoryType.
	 * 
	 * @param inventoryType The animal's InventoryType (enum FEMALE or MALE).
	 */
	public void setInventoryType(InventoryType inventoryType) {
		this.type = inventoryType; // don't need to validate because we are using an enum
	}

	/**
	 * Get the animal's price in pounds.
	 * 
	 * @return The animal's price in pounds.
	 */
	public double getPrice() {
		return this.price;
	}

	/**
	 * Set the inventory price in dollars.
	 * The incentory's price can not be negative, and if it is set it to zero.
	 * 
	 * @param price The animal's price in dollars.
	 */
	public void setPrice(double price) {
		if (price >= 0)
			this.price = price;
		else
			this.price = 0.0;
	}

	/**
	 * Get the animal's itemType.  This is a final field that can't be
	 * changed once set by the animal class or subclass.  There is
	 * no setter since it can't be changed. 
	 * 
	 * @return The animal's itemType.
	 */
	public String getType() {
		return this.itemType;
	}

	/**
	 * All items can be in the library (behavior). 
	 */
 	public void inLibrary() {
		System.out.println(this.itemType + " is in the library....");
	}
	
 	/**
 	 * All items can be held for a customer (behavior).
 	 */
	public void hold() {
		System.out.println(this.itemType + " is on hold...");
	}
	
}
